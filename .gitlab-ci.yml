image: docker:19.03.12
services:
  - docker:19.03.12-dind

stages:
  - build
  - push
  - deploy
  - notify

variables:
  GIT_SUBMODULE_STRATEGY: recursive

before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y && apt-get install git -y )'
  - 'which ssh-agent || (apk add --no-cache openssh-client)'
  - apk add --no-cache openssh-client bash python3 docker-compose curl
  - eval $(ssh-agent -s)
  - mkdir -p ~/.ssh
  - echo "$SSH_PRIVATE_KEY" | ssh-add - > ~/.ssh/id_rsa
  - echo "StrictHostKeyChecking no" >> ~/.ssh/config
  - chmod -R 700 ~/.ssh
  - export IMAGE=$CI_REGISTRY_IMAGE

build:
  stage: build
  script:
    - docker-compose -f docker-compose.yml -p $PROJECT_NAME build
  variables:
    PROJECT_NAME: todo
  tags:
    - dev
    - todo
  only:
    - main

push:
  stage: push
  script:
    - docker push ${IMAGE}/app:latest
    - docker push ${IMAGE}/nginx:latest
  tags:
    - dev
    - todo
  only:
    - main

deploy:
  stage: deploy
  script:
    - docker-compose -f docker-compose.yml pull
    - docker-compose -f docker-compose.yml -p $PROJECT_NAME stop
    - docker-compose -f docker-compose.yml -p $PROJECT_NAME rm -f
    - docker-compose -f docker-compose.yml -p $PROJECT_NAME up -d
  variables:
    PROJECT_NAME: todo
  tags:
    - dev
    - todo
  only:
    - main

notify:
  stage: notify
  before_script:
    - apk add --no-cache bash curl
  script:
    - bash ci-notify.sh "Success work frontend"
  tags:
    - dev
    - todo

notify_error:
  stage: notify
  before_script:
    - apk add --no-cache bash curl
  script:
    - bash ci-notify.sh "Fail work frontend"
  when: on_failure
  tags:
    - dev
    - todo